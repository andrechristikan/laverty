{
    "service":{
        "main":{
            "start": "[MainVerticleStarting] start...",
            "success":"[MainVerticleSucceeded] successfully running.",
            "failed":"[MainVerticleFailed] : ",
            "otherwise":"[MainVerticleOterwise] : "
        },
        "server":{
            "start":"[ServerStarting] Server trying to start..",
            "failed": "[ServerFailed] : ",
            "ongoing":"[ServerOngoing] Web server started on #IP_ADDRESS:#PORT"
        },
        "login":{
            "start":"[LoginProxyServiceStarting] Start service #eventBusServiceName...",
            "end":"[LoginProxyServiceOngoing]End service #eventBusServiceName.",
            "controller":{
                "create":"[LoginControllerCreated] Controller #eventBusServiceName creating.",
                "end": "[LoginControllerEnded] Controller #eventBusServiceName created",
                "login":{
                    "start":"[LoginControllerStarting] Login ongoing...",
                    "end":"[LoginControllerEnded] Login ended."
                }
            },
            "implement":{
                "database-connection":"[LoginImplementDatabaseConnection] Database connection pool for #serviceAddress Service created.",
                "success":"[LoginImplementSuccess] Success to login",
                "failed":"[LoginImplementFailed] : ",
                "get-token-success": "[LoginImplementSuccess] Success to get token : "
            },
            "exception": {
                "start": "[LoginException] Enter the LoginException.",
                "end": "[LoginException] LoginException End."
            }
        },
        "user": {
            "start":"[UserProxyServiceStarting] Start service #eventBusServiceName...",
            "end":"[UserProxyServiceOngoing]End service #eventBusServiceName.",
            "controller":{
                "create":"[UserControllerCreated] Controller #eventBusServiceName creating.",
                "end": "[UserControllerEnded] Controller #eventBusServiceName created",
                "get":{
                    "start":"[UserControllerStarting] User ongoing...",
                    "end":"[UserControllerEnded] User ended."
                }
            },
            "implement":{
                "database-connection":"[UserImplementDatabaseConnection] Database connection pool for #serviceAddress Service created.",
                "success":"[UserImplementSuccess] Success to user",
                "failed":"[UserImplementFailed] : ",
                "get-token-success": "[UserImplementSuccess] Success to get token : "
            }
        }
    },
    "exception": {
        "default": {
            "start": "[DefaultExceptionStarting] Enter the DefaultException.",
            "end": "[DefaultExceptionEnded] DefaultException End."
        },
        "not-found": {
            "start": "[NotFoundExceptionStarting] Enter the NotFoundException.",
            "end": "[NotFoundExceptionEnded] NotFoundException End."
        },
        "login":{
            "start": "[LoginExceptionStarting] Enter the LoginException.",
            "failed": "[LoginExceptionFailed] : ",
            "end": "[LoginExceptionEnded] LoginException End."
        }
    },
    "authorization":{
        "success":"[AuthorizationSuccess] Welcome majesty",
        "failed":"[AuthorizationFailed] : "
    },
    "authentication":{
        "success":"[AuthenticationSuccess] Let's roll",
        "failed": "[AuthenticationFailed] : "
    },
    "database":{
        "create-pool":{
            "success":"[DatabaseHelper] Success to create pool connection."
        },
        "destroy-pool":{
            "success":"[DatabaseHelper] Success to destroy pool connection."
        },
        "open-connection":{
            "success":"[DatabaseHelper] Success to open connection."
        },
        "close-connection":{
            "success":"[DatabaseHelper] Success to close connection."
        }
    }
}
